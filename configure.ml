(* ocaml ./configure.ml *)
#use "topfind"

#require "unix"

let strip = ref true
let rm = ref ""
let ext = ref ""
let os_type = ref ""
let installed pkg = 0 = Sys.command ("ocamlfind query -qo -qe " ^ pkg)
let errmsg = "usage: " ^ Sys.argv.(0) ^ " [options]"
let api = ref false
let sosa = ref `None
let gwdb = ref `None
let syslog = ref false
let set_api () = api := true
let set_syslog () = syslog := true
let release = ref false

let speclist =
  [
    ( "--release",
      Arg.Set release,
      " Use release profile: no debug information (default: "
      ^ string_of_bool !release ^ ")" );
    ( "--debug",
      Arg.Clear release,
      " Use dev profile: no optimization, debug information (default: "
      ^ string_of_bool (not !release)
      ^ ")" );
  ]
  |> List.sort compare |> Arg.align

let () =
  Arg.parse speclist failwith errmsg;
  let dune_dirs_exclude = ref "" in
  let syslog_d, syslog_pkg =
    match !syslog with true -> (" -D SYSLOG", "syslog") | false -> ("", "")
  in
  let dune_profile = if !release then "release" else "dev" in
  let os_type, os_d, ext, rm, strip =
    match
      let p = Unix.open_process_in "uname -s" in
      let line = input_line p in
      close_in p;
      line
    with
    | ("Linux" | "Darwin" | "FreeBSD") as os_type ->
        (os_type, " -D UNIX", "", "/bin/rm -f", "strip")
    | _ -> ("Win", " -D WINDOWS", ".exe", "rm -f", "true")
  in
  let ch = open_out "Makefile.config" in
  let writeln s = output_string ch @@ s ^ "\n" in
  let var name value = writeln @@ name ^ "=" ^ value in
  writeln @@ "# This file is generated by " ^ Sys.argv.(0) ^ ".";
  var "OS_TYPE" os_type;
  var "STRIP" strip;
  var "RM" rm;
  var "EXT" ext;
  var "OS_D" os_d;
  var "SYSLOG_D" syslog_d;
  var "DUNE_DIRS_EXCLUDE" !dune_dirs_exclude;
  var "DUNE_PROFILE" dune_profile;
  close_out ch
